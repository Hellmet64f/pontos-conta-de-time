:root {
    --bg-dark: #0f172a; --bg-medium: #1e293b; --bg-light: #334155;
    --primary: #22d3ee; --primary-hover: #67e8f9; --secondary: #f43f5e;
    --success: #10b981; --danger: #ef4444; --warning: #f59e0b;
    --text-lightest: #f8fafc; --text-light: #e2e8f0; --text-muted: #94a3b8;
    --border-color: #475569;
}

/* RESET GERAL */
* { box-sizing: border-box; margin: 0; padding: 0; }

body {
    font-family: 'Poppins', sans-serif; background-color: var(--bg-dark); color: var(--text-light);
    padding: 2rem 1rem; line-height: 1.6;
}

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap');

.container { max-width: 900px; margin: 0 auto; }
.hidden { display: none !important; }

/* HEADER */
header { text-align: center; margin-bottom: 3rem; animation: slideInDown 0.6s ease-out; }
.logo { width: 100px; height: 100px; margin-bottom: 1rem; }
h1.team-name { color: var(--text-lightest); font-size: 2.5rem; font-weight: 800; }

/* CARD - COMPONENTE BASE */
.card {
    background: linear-gradient(145deg, var(--bg-medium), var(--bg-dark));
    border: 1px solid var(--border-color); border-radius: 16px; padding: 2rem;
    margin-bottom: 2rem; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); animation: slideInUp 0.6s ease-out;
}
.card h2 { font-size: 1.75rem; color: var(--text-lightest); margin-bottom: 1.5rem; border-bottom: 2px solid var(--primary); padding-bottom: 0.5rem; }

/* BOTÕES */
.btn {
    display: inline-block; padding: 0.75rem 1.5rem; background-color: var(--primary); color: var(--bg-dark);
    border: none; border-radius: 50px; font-size: 1rem; font-weight: 700;
    cursor: pointer; text-decoration: none; transition: all 0.2s ease-in-out;
}
.btn:hover { background-color: var(--primary-hover); transform: translateY(-3px) scale(1.05); box-shadow: 0 4px 20px rgba(34, 211, 238, 0.3); }
.btn.btn-danger { background-color: var(--danger); color: white; }
.btn.btn-warning { background-color: var(--warning); color: var(--bg-dark); }


/* LISTAS E TABELAS DO ADMIN */
.leaderboard-list { list-style: none; padding: 0; }
tbody#admin-roster-list { list-style: none; padding: 0; }
tbody#admin-roster-list tr { display: flex; align-items: center; padding: 0.5rem; border-bottom: 1px solid var(--border-color); }
tbody#admin-roster-list tr:last-child { border-bottom: none; }
.admin-roster-actions { display: flex; gap: 0.5rem; margin-left: auto; }
.admin-roster-item .btn { padding: 0.5rem; font-size: 0.8rem; border-radius: 8px; }

/* TABELA DE CLASSIFICAÇÃO */
#leaderboard-table { width: 100%; border-collapse: collapse; }
#leaderboard-list tr { transition: background-color 0.2s; }
#leaderboard-list tr:hover { background-color: var(--bg-light); cursor: pointer; }
#leaderboard-list td, #leaderboard-table th { padding: 1rem; text-align: left; border-bottom: 1px solid var(--border-color); }
#leaderboard-list tr:last-child td { border-bottom: none; }

/* REGRAS */
.rules-list { list-style: none; padding-left: 0; }
.rules-list li { margin-bottom: 0.5rem; padding-left: 1.5rem; position: relative; }
.rules-list li::before { content: '★'; position: absolute; left: 0; color: var(--primary); }


/* ESTILOS DA CLASSIFICAÇÃO */
.pos { font-size: 1.5rem; font-weight: 800; color: var(--primary); text-align: center;}
.player-name { font-size: 1.1rem; font-weight: 600; color: var(--text-lightest); }
.rank-1 .pos { color: var(--warning); }
.rank-1 .player-name { color: var(--warning); }

/* --- NOVO ESTILO PARA PRÊMIO --- */
.prize-winner { color: var(--warning); font-weight: 700; text-shadow: 0 0 5px var(--warning); }


/* ADMIN */
.admin-toggle { position: fixed; bottom: 1.5rem; right: 1.5rem; z-index: 1000; }
#admin-panel { max-height: 0; overflow: hidden; opacity: 0; transition: all 0.6s ease-in-out; }
#admin-panel.visible { max-height: 2000px; opacity: 1; margin-top: 2rem;}

.admin-tabs { display: flex; border-bottom: 1px solid var(--border-color); margin-bottom: 1.5rem; }
.tab-button { background: none; border: none; color: var(--text-muted); padding: 0.5rem 1rem; font-size: 1rem; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.2s; }
.tab-button.active { color: var(--primary); border-bottom-color: var(--primary); }

input[type="text"], input[type="number"] { width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-dark); color: var(--text-light); font-size: 1rem; }
.stat-entry-list .player-name { width: 120px; flex-grow: 0; }
.stat-entry-item { display: flex; flex-wrap: wrap; align-items: center; gap: 0.5rem 1rem; padding: 1rem 0; border-bottom: 1px solid var(--border-color); }
.stat-input-group { display: flex; align-items: center; gap: 0.5rem; }
.stat-input-group label { font-weight: 600; color: var(--text-muted); }
.stat-input-group .btn { width: 32px; height: 32px; padding: 0; border-radius: 50%; font-size: 1.2rem; display: flex; align-items: center; justify-content: center; background-color: var(--bg-light); color: var(--primary); }
.stat-input-group input { width: 50px; text-align: center; }

/* MODAL */
.modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); backdrop-filter: blur(5px); z-index: 2000; opacity: 0; pointer-events: none; transition: opacity 0.3s; }
.modal-overlay.visible { opacity: 1; pointer-events: all; }
.modal {
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0.95);
    background: linear-gradient(145deg, #2a3a50, var(--bg-dark));
    border-radius: 16px; padding: 2.5rem; width: 90%; max-width: 500px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.5); border: 1px solid var(--border-color);
    transition: transform 0.3s;
}
.modal-overlay.visible .modal { transform: translate(-50%, -50%) scale(1); }
.modal-close { position: absolute; top: 1rem; right: 1rem; background: none; border: none; color: var(--text-muted); font-size: 1.5rem; cursor: pointer; }
.modal-header h3 { font-size: 2rem; color: var(--primary); }
.modal-header p { font-size: 1.2rem; color: var(--text-lightest); margin-bottom: 0.5rem; }
.modal-header .prize-winner { font-size: 1rem; margin-bottom: 1.5rem;}
.stat-graph { display: flex; justify-content: space-around; align-items: flex-end; height: 150px; border-left: 2px solid var(--border-color); border-bottom: 2px solid var(--border-color); padding-top: 1rem;}
.stat-bar { width: 40px; background-color: var(--secondary); text-align: center; color: white; font-weight: 700; transition: height 0.5s ease-out; border-radius: 4px 4px 0 0; }
.bar-label { margin-top: 0.5rem; font-size: 0.8rem; color: var(--text-muted); }

/* ANIMAÇÕES */
@keyframes slideInDown { from { opacity: 0; transform: translateY(-30px); } to { opacity: 1; transform: translateY(0); } }
@keyframes slideInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }```

---

### Arquivo 3 de 3: `script.js`
*(Atualizada a constante `QUALIFICATION_AVERAGE` e as funções `renderLeaderboard` e `openPlayerModal` para incluírem a lógica e a exibição do prêmio.)*

```javascript
document.addEventListener('DOMContentLoaded', () => {

    const STORAGE_KEYS = { roster: 'tcs_roster_v3', stats: 'tcs_stats_v3' };
    const QUALIFICATION_AVERAGE = 15.0; // --- ATUALIZADO ---
    const PRIZE_THRESHOLD = 100; // --- NOVO ---

    // === 1. FUNÇÕES DE DADOS E CÁLCULO ===
    const getRoster = () => JSON.parse(localStorage.getItem(STORAGE_KEYS.roster)) || [];
    const saveRoster = (roster) => localStorage.setItem(STORAGE_KEYS.roster, JSON.stringify(roster));
    const getStats = () => JSON.parse(localStorage.getItem(STORAGE_KEYS.stats)) || {};
    const saveStats = (stats) => localStorage.setItem(STORAGE_KEYS.stats, JSON.stringify(stats));

    const calculatePoints = (playerId, stats) => {
        const playerStats = stats[playerId] || { goals: 0, assists: 0, saves: 0, dribbles: 0 };
        const goalPoints = (playerStats.goals || 0) * 0.3;
        const assistPoints = (playerStats.assists || 0) * 0.2;
        const savePoints = (playerStats.saves || 0) * 0.8;
        const dribblePoints = (playerStats.dribbles || 0) * 1.0;
        return goalPoints + assistPoints + savePoints + dribblePoints;
    };

    // === 2. FUNÇÕES DE RENDERIZAÇÃO (ATUALIZAR TELA) ===
    const renderAll = () => {
        renderLeaderboard();
        renderAdminRoster();
        renderStatEntryForm();
    };

    const renderLeaderboard = () => {
        const leaderboardList = document.getElementById('leaderboard-list');
        const roster = getRoster();
        const stats = getStats();
        leaderboardList.innerHTML = '';

        if (roster.length === 0) {
            leaderboardList.innerHTML = `<tr><td colspan="5" style="text-align: center; padding: 2rem;">Nenhum jogador no elenco.</td></tr>`;
            return;
        }

        const rankedPlayers = roster.map(player => ({ ...player, points: calculatePoints(player.id, stats) })).sort((a, b) => b.points - a.points);

        rankedPlayers.forEach((player, index) => {
            const isRank1 = index === 0;
            const status = player.points >= QUALIFICATION_AVERAGE ? 'Qualificado' : 'Não Qualificado';
            
            // --- LÓGICA DO PRÊMIO ---
            const hasWonPrize = player.points >= PRIZE_THRESHOLD;
            const prizeHTML = hasWonPrize ? `<span class="prize-winner">🏆 100 Robux!</span>` : `<span>-</span>`;

            const row = document.createElement('tr');
            row.className = isRank1 ? 'rank-1' : '';
            row.dataset.playerId = player.id; // Para o modal funcionar
            row.innerHTML = `
                <td><span class="pos">${isRank1 ? '👑' : `${index + 1}º`}</span></td>
                <td class="player-name">${player.name}</td>
                <td>${player.points.toFixed(1)}</td>
                <td>${status}</td>
                <td>${prizeHTML}</td>
            `;
            leaderboardList.appendChild(row);
        });
    };

    const renderAdminRoster = () => {
        const rosterList = document.getElementById('admin-roster-list');
        const roster = getRoster();
        rosterList.innerHTML = '';
        roster.forEach((player) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><span class="player-name">${player.name}</span></td>
                <td class="admin-roster-actions">
                    <button class="btn admin-roster-item btn-warning" data-id="${player.id}" title="Resetar Stats">Resetar Stats</button>
                    <button class="btn admin-roster-item" data-id="${player.id}" title="Editar Nome">Editar</button>
                    <button class="btn admin-roster-item btn-danger" data-id="${player.id}" title="Excluir Jogador">Excluir</button>
                </td>
            `;
            rosterList.appendChild(row);
        });
    };
    
    const renderStatEntryForm = () => {
        const statEntryList = document.getElementById('stat-entry-list');
        const roster = getRoster();
        statEntryList.innerHTML = '';
        roster.forEach(player => {
            const item = document.createElement('div');
            item.className = 'stat-entry-item';
            item.dataset.playerId = player.id;
            item.innerHTML = `<span class="player-name">${player.name}</span><div class="stat-input-group"><label>G</label><button class="btn add-stat">+</button><input type="number" class="stat-value" min="0" value="0"></div><div class="stat-input-group"><label>A</label><button class="btn add-stat">+</button><input type="number" class="stat-value" min="0" value="0"></div><div class="stat-input-group"><label>S</label><button class="btn add-stat">+</button><input type="number" class="stat-value" min="0" value="0"></div><div class="stat-input-group"><label>D</label><button class="btn add-stat">+</button><input type="number" class="stat-value" min="0" value="0"></div>`;
            statEntryList.appendChild(item);
        });
    };

    const openPlayerModal = (playerId) => {
        const roster = getRoster();
        const stats = getStats();
        const player = roster.find(p => p.id === playerId);
        if (!player) return;

        const playerStats = stats[playerId] || { goals: 0, assists: 0, saves: 0, dribbles: 0 };
        const points = calculatePoints(playerId, stats);
        const hasWonPrize = points >= PRIZE_THRESHOLD;
        const prizeHTML = hasWonPrize ? `<div class="prize-winner">🏆 Ganhou 100 Robux!</div>` : '';

        const modalContent = document.getElementById('modal-content');
        const statsArray = [playerStats.goals, playerStats.assists, playerStats.saves, playerStats.dribbles];
        const maxStat = Math.max(...statsArray, 1);
        
        modalContent.innerHTML = `
            <div class="modal-header">
                <h3>${player.name}</h3>
                <p>${points.toFixed(1)} Pontos</p>
                ${prizeHTML}
            </div>
            <div class="stat-graph">
                <div class="bar-container"><div class="stat-bar" style="height:${(playerStats.goals/maxStat)*100}%; background-color:#f43f5e;" title="${playerStats.goals} Gols">${playerStats.goals}</div><div class="bar-label">Gols</div></div>
                <div class="bar-container"><div class="stat-bar" style="height:${(playerStats.assists/maxStat)*100}%; background-color:#3b82f6;" title="${playerStats.assists} Assist.">${playerStats.assists}</div><div class="bar-label">Assist.</div></div>
                <div class="bar-container"><div class="stat-bar" style="height:${(playerStats.saves/maxStat)*100}%; background-color:#10b981;" title="${playerStats.saves} Salvos">${playerStats.saves}</div><div class="bar-label">Salvos</div></div>
                <div class="bar-container"><div class="stat-bar" style="height:${(playerStats.dribbles/maxStat)*100}%; background-color:#f59e0b;" title="${playerStats.dribbles} Dribles">${playerStats.dribbles}</div><div class="bar-label">Dribles</div></div>
            </div>`;
        document.getElementById('player-modal').classList.add('visible');
    };

    // === 3. MANIPULADORES DE EVENTOS ===
    document.getElementById('admin-toggle-button').addEventListener('click', () => { document.getElementById('admin-panel').classList.toggle('visible'); });
    
    document.querySelector('.admin-tabs').addEventListener('click', e => {
        if (e.target.matches('.tab-button')) {
            document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            e.target.classList.add('active'); document.getElementById(e.target.dataset.tab).classList.add('active');
        }
    });

    document.getElementById('add-player-form').addEventListener('submit', e => {
        e.preventDefault(); const input = document.getElementById('new-player-name'); const newName = input.value.trim();
        if (newName) { const roster = getRoster(); roster.push({ id: Date.now().toString(), name: newName }); saveRoster(roster); renderAll(); input.value = ''; }
    });
    
    document.getElementById('admin-roster-list').addEventListener('click', e => {
        const roster = getRoster(); const stats = getStats(); const id = e.target.dataset.id;
        if (e.target.matches('.btn-danger')) {
            if (confirm('Tem certeza? Isso removerá o jogador e todas as suas estatísticas permanentemente.')) {
                saveRoster(roster.filter(p => p.id !== id));
                delete stats[id]; saveStats(stats); renderAll();
            }
        }
        if (e.target.matches('.btn:not(.btn-danger):not(.btn-warning)')) {
            const player = roster.find(p => p.id === id);
            const newName = prompt('Digite o novo nome para:', player.name);
            if (newName && newName.trim()) { player.name = newName.trim(); saveRoster(roster); renderAll(); }
        }
        if (e.target.matches('.btn-warning')) {
            if (confirm('Tem certeza que deseja resetar as estatísticas deste jogador? (Gols, assistências, etc. voltarão para 0).')) {
                if(stats[id]) { stats[id] = { goals: 0, assists: 0, saves: 0, dribbles: 0 }; saveStats(stats); }
                renderAll(); alert('Estatísticas do jogador resetadas com sucesso!');
            }
        }
    });

    document.getElementById('stat-entry-list').addEventListener('click', e => { if (e.target.matches('.add-stat')) { const input = e.target.nextElementSibling; input.value = parseInt(input.value) + 1; }});

    document.getElementById('save-stats-button').addEventListener('click', () => {
        const currentStats = getStats();
        document.querySelectorAll('.stat-entry-item').forEach(item => {
            const playerId = item.dataset.playerId; const inputs = item.querySelectorAll('.stat-value');
            if (!currentStats[playerId]) currentStats[playerId] = { goals: 0, assists: 0, saves: 0, dribbles: 0 };
            currentStats[playerId].goals += parseInt(inputs[0].value) || 0;
            currentStats[playerId].assists += parseInt(inputs[1].value) || 0;
            currentStats[playerId].saves += parseInt(inputs[2].value) || 0;
            currentStats[playerId].dribbles += parseInt(inputs[3].value) || 0;
        });
        saveStats(currentStats); renderAll();
        alert('Estatísticas da sessão salvas com sucesso!');
    });
    
    document.getElementById('leaderboard-list').addEventListener('click', e => {
        const playerItem = e.target.closest('tr');
        if (playerItem) openPlayerModal(playerItem.dataset.playerId);
    });
    
    document.getElementById('player-modal').addEventListener('click', e => { if (e.target === e.currentTarget || e.target.matches('#modal-close-button')) e.currentTarget.classList.remove('visible'); });

    document.getElementById('reset-all-data').addEventListener('click', () => {
        if (confirm('PERIGO! ISSO APAGARÁ TODO O ELENCO E TODAS AS ESTATÍSTICAS PARA SEMPRE. TEM CERTEZA?')) {
            localStorage.removeItem(STORAGE_KEYS.roster);
            localStorage.removeItem(STORAGE_KEYS.stats);
            renderAll();
        }
    });
    
    // === 4. CARGA INICIAL ===
    renderAll();
});```

### Como o Novo Sistema Funciona

*   **Abra o `index.html`** e adicione seus jogadores e estatísticas normalmente.
*   **A pontuação será calculada automaticamente** com base nas novas regras (0.3 por gol, etc.).
*   Assim que um jogador atingir **15 pontos**, seu status mudará para "Qualificado".
*   Assim que um jogador atingir **100 pontos**, a coluna "Prêmio" mostrará o troféu **🏆** e a mensagem **"100 Robux!"**
*   Tudo é atualizado em tempo real.
