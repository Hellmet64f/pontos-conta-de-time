// Aguarda o HTML da página ser completamente carregado para executar o script
document.addEventListener('DOMContentLoaded', () => {
    
    // =================================================================================
    // CONFIGURAÇÕES GLOBAIS E FUNÇÕES DE DADOS
    // =================================================================================
    
    const QUALIFICATION_AVERAGE = 4.5;

    // Funções para ler e salvar dados no armazenamento local do navegador
    const getPlayers = () => JSON.parse(localStorage.getItem('tcsPlayers')) || [];
    const savePlayers = (players) => localStorage.setItem('tcsPlayers', JSON.stringify(players));
    const getMatches = () => JSON.parse(localStorage.getItem('tcsMatches')) || [];
    const saveMatches = (matches) => localStorage.setItem('tcsMatches', JSON.stringify(matches));

    // Função que calcula a pontuação total de um jogador
    const calculatePoints = (player) => {
        let points = (player.goals * 3) + (player.saves * 2);
        points += Math.floor(player.assists / 7);
        points += Math.floor(player.dribbles / 5);
        return points;
    };

    // =================================================================================
    // IDENTIFICAÇÃO DA PÁGINA ATUAL
    // =================================================================================

    const pageRankingBody = document.getElementById('player-ranking-body');
    const pageHistoryContainer = document.getElementById('match-history-container');
    const pageAdminForm = document.getElementById('add-player-form');

    // =================================================================================
    // LÓGICA DA PÁGINA DE CLASSIFICAÇÃO (INDEX.HTML)
    // =================================================================================
    
    if (pageRankingBody) {
        const players = getPlayers();

        if (players.length === 0) {
            // Se não houver jogadores, exibe uma mensagem clara
            pageRankingBody.innerHTML = `<tr><td colspan="3" class="empty-message">Nenhum jogador cadastrado. Adicione na página de Admin.</td></tr>`;
        } else {
            players.forEach(player => {
                const totalPoints = calculatePoints(player);
                const status = totalPoints >= QUALIFICATION_AVERAGE ? 'Qualificado' : 'Não Qualificado';
                const statusClass = totalPoints >= QUALIFICATION_AVERAGE ? 'status-qualified' : 'status-not-qualified';
                
                const row = pageRankingBody.insertRow();
                row.innerHTML = `<td>${player.name}</td><td>${totalPoints.toFixed(1)}</td><td class="${statusClass}">${status}</td>`;
            });
        }
    }

    // =================================================================================
    // LÓGICA DA PÁGINA DE HISTÓRICO (JOGOS.HTML)
    // =================================================================================
    
    if (pageHistoryContainer) {
        const matches = getMatches();

        if (matches.length === 0) {
            // Se não houver jogos, exibe uma mensagem clara
            pageHistoryContainer.innerHTML = `<p class="empty-message">Nenhum jogo registrado. Adicione na página de Admin.</p>`;
        } else {
            pageHistoryContainer.innerHTML = ''; // Limpa antes de adicionar
            matches.slice().reverse().forEach(match => {
                const performancesHTML = match.stats
                    .filter(s => s.goals > 0 || s.assists > 0 || s.saves > 0 || s.dribbles > 0)
                    .map(stat => `<li>${stat.name} (G: ${stat.goals}, A: ${stat.assists}, S: ${stat.saves}, D: ${stat.dribbles})</li>`)
                    .join('');

                const matchCard = document.createElement('div');
                matchCard.className = 'match-card';
                matchCard.innerHTML = `
                    <h3>vs ${match.opponent}</h3>
                    <p>Resultado: ${match.result}</p>
                    ${performancesHTML ? `<div class="player-performance"><ul>${performancesHTML}</ul></div>` : ''}
                `;
                pageHistoryContainer.appendChild(matchCard);
            });
        }
    }

    // =================================================================================
    // LÓGICA DA PÁGINA DE ADMIN (ADMIN.HTML)
    // =================================================================================
    
    if (pageAdminForm) {
        // --- Gerenciamento das Abas ---
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                tabContents.forEach(content => {
                    content.classList.toggle('active', content.id === `${button.dataset.tab}-content`);
                });
            });
        });

        // --- Elementos do DOM ---
        const playerForm = document.getElementById('add-player-form');
        const adminPlayerListBody = document.getElementById('admin-player-list-body');
        const matchForm = document.getElementById('add-match-form');
        const playerStatsForMatchDiv = document.getElementById('player-stats-for-match');
        const adminMatchListBody = document.getElementById('admin-match-list-body');

        // --- Funções de Renderização do Admin ---
        const renderAdminPlayers = () => {
            adminPlayerListBody.innerHTML = '';
            const players = getPlayers();
            if (players.length === 0) {
                adminPlayerListBody.innerHTML = `<tr><td colspan="6" class="empty-message">Nenhum jogador cadastrado.</td></tr>`;
            } else {
                players.forEach((p, i) => {
                    adminPlayerListBody.insertRow().innerHTML = `<td>${p.name}</td><td>${p.goals}</td><td>${p.assists}</td><td>${p.saves}</td><td>${p.dribbles}</td><td><button class="btn-remove" data-type="player" data-index="${i}">Remover</button></td>`;
                });
            }
        };

        const renderAdminMatches = () => {
            adminMatchListBody.innerHTML = '';
            const matches = getMatches();
             if (matches.length === 0) {
                adminMatchListBody.innerHTML = `<tr><td colspan="3" class="empty-message">Nenhum jogo registrado.</td></tr>`;
            } else {
                matches.forEach((m, i) => {
                    adminMatchListBody.insertRow().innerHTML = `<td>${m.opponent}</td><td>${m.result}</td><td><button class="btn-remove" data-type="match" data-index="${i}">Remover</button></td>`;
                });
            }
        };
        
        const populateMatchForm = () => {
            playerStatsForMatchDiv.innerHTML = '';
            const players = getPlayers();
            if (players.length === 0) {
                playerStatsForMatchDiv.innerHTML = `<p class="empty-message">Adicione jogadores na aba "Jogadores" primeiro.</p>`;
                return;
            }
            players.forEach(p => {
                playerStatsForMatchDiv.innerHTML += `<div class="player-stat-input"><h4>${p.name}</h4><input type="hidden" value="${p.name}"><label>Gols:</label><input type="number" class="match-goals" value="0" min="0"><label>Assist.:</label><input type="number" class="match-assists" value="0" min="0"><label>Salvos:</label><input type="number" class="match-saves" value="0" min="0"><label>Dribles:</label><input type="number" class="match-dribbles" value="0" min="0"></div>`;
            });
        };

        // --- Eventos (Ações do Usuário) ---
        playerForm.addEventListener('submit', e => {
            e.preventDefault();
            const playerName = document.getElementById('player-name').value.trim();
            let players = getPlayers();
            const existingPlayerIndex = players.findIndex(p => p.name.toLowerCase() === playerName.toLowerCase());
            
            const playerData = { 
                name: playerName, 
                goals: parseInt(document.getElementById('goals').value) || 0, 
                assists: parseInt(document.getElementById('assists').value) || 0, 
                saves: parseInt(document.getElementById('saves').value) || 0, 
                dribbles: parseInt(document.getElementById('dribbles').value) || 0
            };

            if (existingPlayerIndex > -1) players[existingPlayerIndex] = playerData; // Atualiza
            else players.push(playerData); // Adiciona

            savePlayers(players);
            renderAdminPlayers();
            populateMatchForm();
            playerForm.reset();
        });

        matchForm.addEventListener('submit', e => {
            e.preventDefault();
            const playerStats = Array.from(playerStatsForMatchDiv.querySelectorAll('.player-stat-input')).map(div => ({
                name: div.querySelector('input[type="hidden"]').value,
                goals: parseInt(div.querySelector('.match-goals').value) || 0,
                assists: parseInt(div.querySelector('.match-assists').value) || 0,
                saves: parseInt(div.querySelector('.match-saves').value) || 0,
                dribbles: parseInt(div.querySelector('.match-dribbles').value) || 0
            }));
            
            const newMatch = { 
                opponent: document.getElementById('opponent-name').value, 
                result: document.getElementById('match-result').value, 
                stats: playerStats 
            };
            
            saveMatches([...getMatches(), newMatch]);
            renderAdminMatches();
            matchForm.reset();
            populateMatchForm(); // Resetar os valores do formulário
        });

        document.querySelector('.container').addEventListener('click', e => {
            if (e.target.classList.contains('btn-remove')) {
                const type = e.target.dataset.type;
                const index = parseInt(e.target.dataset.index);
                
                if (type === 'player') {
                    let players = getPlayers();
                    players.splice(index, 1);
                    savePlayers(players);
                    renderAdminPlayers();
                    populateMatchForm();
                } else if (type === 'match') {
                    let matches = getMatches();
                    matches.splice(index, 1);
                    saveMatches(matches);
                    renderAdminMatches();
                }
            }
        });

        // --- Carga Inicial do Admin ---
        renderAdminPlayers();
        renderAdminMatches();
        populateMatchForm();
    }
});
